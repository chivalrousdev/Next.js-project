{"title":"Slider - How it works","content":"The <SliderProvider> component wraps any section of your code with a new slider context. This component does not render anything in the DOM. This is where the slider settings  are configured like slidesToShow and breakpoints.\nInside this is the <SliderTrack> component, which renders a scrollable element onto the page and overflows its content as necessary. Within the track are <Slide> components, each of which is a simple wrapper around the Intersection Observer API. These slides report their intersection statuses to the <SliderProvider> as they happen, using the track as their root. The last-most intersecting slide is considered active. With this pattern, we can freely navigate the track and trust the index is accurate.\nBy default, all sliders can be scrolled or dragged, although some sliders may want to render navigation controls. The <SliderButton> covers the most common navigation needs, but sliders are also easily controlled using methods provided by the useSlider hook. It is also possible to subscribe to slide events using the onSlide prop of the provider."}